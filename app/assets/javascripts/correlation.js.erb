// This file contains javascript code for producing correlation plots
// replicate 1 on y axis
//= require foundation
$(document).foundation();

var test

function correlation() {

  var margin = {top: 10, right: 400, bottom: 200, left: 50},
  width = document.getElementById("graph").clientWidth,
  height = width,

  svg = d3.select("body #graph")
	  .append("svg")
	  .attr("id","correlationsvg")
	  .attr("width",width+margin.left+margin.right).attr("height",height+margin.top+margin.bottom)
	  .append("g")
	  .attr("transform","translate(" + margin.left + "," + margin.top + ")");
  xScale = d3.scale.log()
		   .domain([1,d3.max(dataset,function(d){return d.exp2;})])
		   .range([0,width]),
  yScale = d3.scale.log()
		   .domain([1,d3.max(dataset,function(d){return d.exp1;})])
		   .range([height,0]),
  xAxis = d3.svg.axis()
		.scale(xScale)
	 .orient("bottom"),
  yAxis = d3.svg.axis()
		.scale(yScale)
	 .orient("left"),
  line = d3.svg.line()
    .x(function(d) { return d.exp2 + margin.left; })
    .y(function(d) { return d.exp1 + margin.top; }),
  lin = ss.linear_regression().data(dataset.map(function(d) {
    return [xScale(d.exp2), yScale(d.exp1)];
  })).line(),
  lindata = xScale.domain().map(function(x){
    return {exp2: x, exp1: lin(x)};
  }),
  r_squared = ss.r_squared(dataset.map(function(d){return [Math.log10(d.exp2),Math.log10(d.exp1)]}), function(x) { return x; }),
  timing = 100,
  radius = 5,
  radius_multiplier = 3,
  selected_fill = "#00FFFF"
  default_fill = "#000"
  
  svg.append("g")
     .attr("class", "x axis")
     .attr("transform","translate("+margin.left+","+margin.top+")")
     .call(xAxis);
  d3.selectAll(".x").selectAll(".tick text")
    .text(null)
    .filter(powerOfTen)
    .text(10)
    .append("tspan")
    .attr("dy","-.7em").style("font-size","6pt")
    .text(function(d){return Math.round(Math.log(d) / Math.LN10)})
  
  svg.append("g")
     .attr("class", "y axis")
     .attr("transform","translate("+margin.left+","+margin.top+")")
     .call(yAxis);
  d3.selectAll(".y").selectAll(".tick text")
     .text(null)
     .filter(powerOfTen)
     .text(10)
     .append("tspan")
     .attr("dy","-.7em").style("font-size","6pt")
     .text(function(d){return Math.round(Math.log(d) / Math.LN10)});
  svg.selectAll("circle")
     .data(dataset)
     .enter()
     .append("circle")
     .attr({
       cx: function(d) {return xScale(d.exp2) + margin.left;},
       cy: function(d) {return yScale(d.exp1) + margin.top;},
       r: radius,
       id: function(d) {return d.gene;},
       class: "point",
       xexpression: function(d) {return d.exp2},
       yexpression: function(d) {return d.exp1}
     });
  circles = d3.selectAll("circle");
  circles.on("mouseover",function(d){
    selected = d3.select(this);
    selected.transition().duration(timing)
	    .attr("r",radius*radius_multiplier)
	    .style("fill",selected_fill);
    d3.select("#tooltip")
    .style("left",(d3.event.pageX + 20) + "px")
    .style("top",(d3.event.pageY + 20) + "px")
    .classed("hidden",false)
    .html("<strong>Id: " + d.gene + "</strong><br/>" +
	  "<strong>Replicate 1: " + d.exp1.toFixed(2) + "</strong><br/>" +
	  "<strong>Replicate 2: " + d.exp2.toFixed(2) + "</strong>"
    )
  }).on("mouseout",function(d){
    selected = d3.select(this);
    selected.transition().attr("r",radius).style("fill",default_fill);
    d3.select("#tooltip")
      .classed("hidden",true)
  });

  svg.append("path")
     .datum(lindata)
     .attr("class","reg")
     .attr("d",line);
  d3.select("#messages")
     .html("<strong>R<sup>2</sup></strong>: " + r_squared.toFixed(3))
}

function powerOfTen(d){return d/Math.pow(10,Math.ceil(Math.log(d)/Math.LN10 - 1e-12)) === 1;}



